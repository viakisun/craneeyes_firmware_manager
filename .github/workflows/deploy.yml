name: CD - Deploy to EC2

on:
  push:
    branches: [ main ]
    paths:
      - 'src/**'
      - 'home/**'
      - 'scripts/**'
      - 'server.js'
      - 'sftp-server.js'
      - 'package.json'
      - 'package-lock.json'
      - 'database/**'
      - 'ecosystem.config.cjs'
      - 'nginx.conf'
      - '.github/workflows/deploy.yml'

  workflow_dispatch:
    inputs:
      reason:
        description: 'Deployment reason'
        required: false
        default: 'Manual deployment'

jobs:
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      
      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: 📦 Install dependencies
        run: npm ci
      
      - name: 🏗️ Build frontend
        run: npm run build
        env:
          # Only frontend-safe variables (no AWS credentials!)
          VITE_API_BASE_URL: https://firmware.craneeyes.com/api
      
      - name: 📦 Create deployment package
        run: |
          tar -czf deployment.tar.gz \
            dist/ \
            home/ \
            src/ \
            server.js \
            sftp-server.js \
            package.json \
            package-lock.json \
            ecosystem.config.cjs \
            nginx.conf \
            database/ \
            scripts/
      
      - name: 🔑 Setup SSH key
        run: |
          mkdir -p ~/.ssh
          
          # Decode base64 SSH key
          echo "${{ secrets.EC2_SSH_KEY_BASE64 }}" | base64 -d > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          
          # Add EC2 host to known_hosts
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts 2>/dev/null || true
          
          # Verify SSH key format
          echo "🔍 Verifying SSH key..."
          if ssh-keygen -l -f ~/.ssh/deploy_key >/dev/null 2>&1; then
            echo "✅ SSH key format is valid"
            echo "Key fingerprint:"
            ssh-keygen -l -f ~/.ssh/deploy_key
            echo "Key type:"
            ssh-keygen -l -f ~/.ssh/deploy_key | awk '{print $NF}'
            echo "Expected: SHA256:iPlXZTu7Lq0RcrrdyhTO2jWip1O8n/TZiIMkZjH4Gq8"
          else
            echo "❌ SSH key format is invalid"
            echo "Please check the EC2_SSH_KEY_BASE64 secret in GitHub settings"
            exit 1
          fi
          
          # Test if key file is readable
          echo "🔍 Key file permissions:"
          ls -la ~/.ssh/deploy_key
          
          # Verify we're connecting to correct host
          echo "🔍 Target host: ${{ secrets.EC2_HOST }}"
          echo "🔍 Target user: ${{ secrets.EC2_USER }}"
      
      - name: 🔌 Test SSH connection
        run: |
          ssh -i ~/.ssh/deploy_key \
            -vvv \
            -o StrictHostKeyChecking=no \
            -o UserKnownHostsFile=/dev/null \
            -o ConnectTimeout=10 \
            ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "echo '✅ SSH connection successful'"
      
      - name: 📤 Upload deployment package
        run: |
          scp -i ~/.ssh/deploy_key \
            -o StrictHostKeyChecking=no \
            -o UserKnownHostsFile=/dev/null \
            deployment.tar.gz \
            ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/tmp/
      
      - name: 🚀 Deploy on EC2
        run: |
          ssh -i ~/.ssh/deploy_key \
            -vvv \
            -o StrictHostKeyChecking=no \
            -o UserKnownHostsFile=/dev/null \
            ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'ENDSSH'
            set -e
            
            echo "════════════════════════════════════════"
            echo "🚀 Starting deployment..."
            echo "════════════════════════════════════════"
            
            # Kill any processes using required ports
            echo "🔍 Checking for processes on ports 3001 and 2222..."
            for port in 3001 2222; do
              PID=$(lsof -t -i:$port 2>/dev/null || true)
              if [ ! -z "$PID" ]; then
                echo "⚠️  Killing process $PID on port $port"
                kill -9 $PID 2>/dev/null || true
                sleep 1
              fi
            done
            
            # Navigate to project directory (create if doesn't exist)
            PROJECT_DIR="/home/ec2-user/craneeyes-firmware-manager"
            if [ ! -d "$PROJECT_DIR" ]; then
              echo "📁 First deployment - creating project directory..."
              mkdir -p "$PROJECT_DIR"
            fi
            cd "$PROJECT_DIR"
            
            # Backup current version (if exists)
            if [ -d "dist" ]; then
              echo "📦 Creating backup..."
              tar -czf backup-$(date +%Y%m%d-%H%M%S).tar.gz dist/ || true
            fi
            
            # Extract new files
            echo "📥 Extracting deployment package..."
            tar -xzf /tmp/deployment.tar.gz
            rm /tmp/deployment.tar.gz
            
            # Install/update dependencies
            echo "📦 Installing dependencies..."
            npm install --production
            
            # Create/update environment file
            echo "📝 Creating .env file from secrets..."
            cat > .env << EOF
          # Backend-only AWS credentials (NEVER expose to frontend)
          AWS_REGION=${{ secrets.AWS_REGION }}
          AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_BUCKET_NAME=${{ secrets.AWS_BUCKET_NAME }}
          
          # Backend-only DB credentials (NEVER expose to frontend)
          DB_HOST=${{ secrets.DB_HOST }}
          DB_PORT=${{ secrets.DB_PORT }}
          DB_NAME=${{ secrets.DB_NAME }}
          DB_USER=${{ secrets.DB_USER }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          
          # Legacy vars (for backward compatibility with old code)
          VITE_AWS_REGION=${{ secrets.AWS_REGION }}
          VITE_AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
          VITE_AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
          VITE_AWS_BUCKET_NAME=${{ secrets.AWS_BUCKET_NAME }}
          VITE_AWS_DB_HOST=${{ secrets.DB_HOST }}
          VITE_AWS_DB_PORT=${{ secrets.DB_PORT }}
          VITE_AWS_DB_NAME=${{ secrets.DB_NAME }}
          VITE_AWS_DB_USER=${{ secrets.DB_USER }}
          VITE_AWS_DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          
          # API & SFTP Configuration
          VITE_API_BASE_URL=https://firmware.craneeyes.com/api
          API_PORT=${{ secrets.API_PORT }}
          SFTP_PORT=${{ secrets.SFTP_PORT }}
          EOF
            echo "✅ .env file created"
            
            # Run database migrations
            echo "💾 Running database migrations..."
            export PGPASSWORD="${{ secrets.DB_PASSWORD }}"
            psql -h ${{ secrets.DB_HOST }} -p ${{ secrets.DB_PORT }} -U ${{ secrets.DB_USER }} -d ${{ secrets.DB_NAME }} -f database/add-allowed-models.sql || echo "Migration may have already been applied"
            echo "✅ Database migrations completed"
            
            # Copy frontend files to Nginx directory
            echo "📋 Copying frontend files..."
            sudo mkdir -p /var/www/html/craneeyes
            sudo cp -r dist/* /var/www/html/craneeyes/
            sudo chown -R nginx:nginx /var/www/html/craneeyes || sudo chown -R www-data:www-data /var/www/html/craneeyes
            
            # Copy landing page to Nginx directory
            echo "📋 Copying landing page..."
            sudo mkdir -p /var/www/html/craneeyes-landing
            sudo cp -r home/* /var/www/html/craneeyes-landing/
            sudo chown -R nginx:nginx /var/www/html/craneeyes-landing || sudo chown -R www-data:www-data /var/www/html/craneeyes-landing
            
            # Deploy Nginx configuration
            echo "🔧 Deploying Nginx configuration..."
            sudo cp nginx.conf /etc/nginx/conf.d/craneeyes.conf
            
            # Test Nginx configuration
            echo "🧪 Testing Nginx configuration..."
            sudo nginx -t
            
            # Reload Nginx
            echo "🔄 Reloading Nginx..."
            sudo systemctl reload nginx || sudo systemctl restart nginx
            
            echo "✅ Nginx configuration deployed and reloaded"
            
            # Restart backend services with PM2
            echo "🔄 Restarting services..."
            if pm2 list | grep -q "craneeyes"; then
              pm2 restart ecosystem.config.cjs --update-env
            else
              pm2 start ecosystem.config.cjs
            fi
            
            # Save PM2 configuration
            pm2 save
            
            # Reload Nginx
            echo "🔄 Reloading Nginx..."
            if sudo nginx -t 2>/dev/null; then
              sudo systemctl reload nginx
            else
              echo "⚠️  Nginx configuration test failed, skipping reload"
            fi
            
            echo ""
            echo "════════════════════════════════════════"
            echo "✅ Deployment completed successfully!"
            echo "════════════════════════════════════════"
            echo ""
            
            # Show service status
            echo "📊 Service Status:"
            pm2 list
          ENDSSH
      
      - name: 🏥 Health check
        run: |
          echo "⏳ Waiting for services to start..."
          sleep 10
          
          echo "🏥 Checking API health..."
          for i in {1..5}; do
            if curl -f https://firmware.craneeyes.com/api/health 2>/dev/null || curl -f http://firmware.craneeyes.com/api/health 2>/dev/null; then
              echo "✅ API is healthy!"
              exit 0
            fi
            echo "⏳ Attempt $i/5 failed, retrying in 5 seconds..."
            sleep 5
          done
          
          echo "⚠️  Health check failed, but deployment completed. Please check manually."
          exit 0
      
      - name: 🧹 Cleanup
        if: always()
        run: |
          rm -f ~/.ssh/deploy_key
          rm -f deployment.tar.gz
      
      - name: 📢 Deployment summary
        run: |
          echo "════════════════════════════════════════"
          echo "📊 Deployment Summary"
          echo "════════════════════════════════════════"
          echo "🏠 Landing: https://craneeyes.com"
          echo "🌐 Firmware Manager: https://firmware.craneeyes.com"
          echo "🔌 API: https://firmware.craneeyes.com/api"
          echo "📁 SFTP: sftp -P ${{ secrets.SFTP_PORT }} user@firmware.craneeyes.com"
          echo "⏰ Deployed at: $(date)"
          echo "✅ Status: Success"
          echo "════════════════════════════════════════"

